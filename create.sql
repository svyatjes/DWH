CREATE TABLE DIM_CAR (
	SK_CAR SERIAL PRIMARY KEY NOT NULL,
	VIN_CODE CHAR(20) NOT NULL,
	MODEL VARCHAR(50) NOT NULL,
	ISSUE_YEAR DATE NOT NULL,
	BREND VARCHAR(30) NOT NULL,
	FROM_DATE DATE,
	END_DATE DATE DEFAULT '9999-12-31',
	IS_CURRENT SMALLINT DEFAULT 1
);
CREATE UNIQUE INDEX UNIQUE_SK_CAR ON DIM_CAR (SK_CAR, MODEL, BREND);


CREATE TABLE DIM_MANAGER (
	SK_MANAGER SERIAL PRIMARY KEY NOT NULL,
	EMP_CODE VARCHAR(3) NOT NULL,
	FIRSTNAME VARCHAR(30) NOT NULL,
	LASTNAME VARCHAR(30) NOT NULL,
	DEPT VARCHAR(3) NOT NULL,
	HIRE_DATE DATE NOT NULL,
	FROM_DATE DATE,
	END_DATE DATE DEFAULT '9999-12-31',
	IS_CURRENT SMALLINT DEFAULT 1
);
CREATE UNIQUE INDEX UNIQUE_SK_MANAGER ON DIM_MANAGER (SK_MANAGER, LASTNAME, DEPT);						

	
CREATE TABLE DIM_DATE (
	SK_SALES_DATE SERIAL PRIMARY KEY NOT NULL,
	DATE_ID SERIAL NOT NULL,
	MONTH SMALLINT NOT NULL CHECK (MONTH BETWEEN 1 AND 12),
	DAY_OF_WEEK SMALLINT NOT NULL CHECK (DAY_OF_WEEK BETWEEN 1 AND 7),
	QUARTER SMALLINT NOT NULL CHECK (QUARTER BETWEEN 1 AND 4),
	WEEK_OF_YEAR INT NOT NULL,
	IS_HOL BOOL NOT NULL
);
CREATE UNIQUE INDEX UNIQUE_DATE_ID ON DIM_DATE (SK_SALES_DATE);

	
CREATE TABLE DIM_CLIENT (
	SK_CLIENT SERIAL PRIMARY KEY NOT NULL,
	PASS_CODE VARCHAR(3) NOT NULL,
	FIRSTNAME VARCHAR(30) NOT NULL,
	LASTNAME VARCHAR(30) NOT NULL,
	BIRTHDAY DATE NOT NULL,
	TEL VARCHAR(20) NOT NULL,
	CITY VARCHAR(20) NOT NULL,
	EMAIL VARCHAR(20) NOT NULL,
	FROM_DATE DATE,
	END_DATE DATE DEFAULT '9999-12-31',
	IS_CURRENT SMALLINT DEFAULT 1
);
CREATE UNIQUE INDEX UNIQUE_SK_CLIENT ON DIM_CLIENT (SK_CLIENT, TEL, CITY);


CREATE TABLE DIM_STORAGE (
	SK_STORAGE SERIAL PRIMARY KEY NOT NULL,
	STORAGE_ID SERIAL NOT NULL,
	CITY VARCHAR(20) NOT NULL,
	STREET VARCHAR(30) NOT NULL,
	BUILDING VARCHAR(5) NOT NULL,
	TEL VARCHAR(20) NOT NULL,
	PARKING_LOT_COUNT INT CHECK (PARKING_LOT_COUNT >= 0),
	AREA INT NOT NULL
);
CREATE UNIQUE INDEX UNIQUE_SK_STORAGE ON DIM_STORAGE(SK_STORAGE);


CREATE TABLE DIM_SHOW_ROOM (
	SK_SHOW_ROOM SERIAL PRIMARY KEY NOT NULL,
	SHOW_ROOM_NAME VARCHAR(30) NOT NULL,
	CITY VARCHAR(30) NOT NULL,
	STREET VARCHAR(50) NOT NULL,
	BUILDING VARCHAR(5) NOT NULL,
	PREVIOUS_TEL VARCHAR(20),
	CURRENT_TEL VARCHAR(20) NOT NULL,
	TEL_UPDATE_DATE DATE DEFAULT CURRENT_DATE
);
CREATE UNIQUE INDEX UNIQUE_SK_SHOW_ROOM ON DIM_SHOW_ROOM (SK_SHOW_ROOM, SHOW_ROOM_NAME);
						 

CREATE TABLE FACT_SALES (
    SK_CAR INTEGER REFERENCES DIM_CAR NOT NULL,
	SK_CLIENT INTEGER REFERENCES DIM_CLIENT NOT NULL,
	SK_MANAGER INTEGER REFERENCES DIM_MANAGER NOT NULL,
	SK_SALES_DATE INTEGER REFERENCES DIM_DATE NOT NULL,
	SK_SHOW_ROOM INTEGER REFERENCES DIM_SHOW_ROOM NOT NULL,
	PRICE NUMERIC NOT NULL CHECK (PRICE >= 0) NOT NULL
);			 
CREATE INDEX ON FACT_SALES (SK_SALES_DATE, PRICE);


CREATE TABLE FACT_STORAGE_SNAPSHOT (
	SK_CAR INTEGER REFERENCES DIM_CAR,
	SK_STORAGE INTEGER REFERENCES DIM_STORAGE,
	SK_SNAPSHOT_DATE INTEGER REFERENCES DIM_DATE,
	DAYS_ON_STORAGE INT NOT NULL CHECK (DAYS_ON_STORAGE >= 0)
);
CREATE INDEX ON FACT_STORAGE_SNAPSHOT (SK_SNAPSHOT_DATE, DAYS_ON_STORAGE);



CREATE TABLE FACT_SALES_PIPELINE (
	SK_CAR INT REFERENCES DIM_CAR,
	SK_CLIENT INT REFERENCES DIM_CLIENT,
	SK_STORAGE INT REFERENCES DIM_STORAGE,
	SK_MF_ORDER_DATE DATE NOT NULL,
	SK_ST_DELIVERY_DATE DATE NOT NULL,
	SK_CLIENT_ORDER_DATE DATE NOT NULL,
	SK_CLIENT_DELIVERY_DATE DATE NOT NULL,
	MF_PRICE INTEGER NOT NULL CHECK (MF_PRICE >= 0),
	DAYS_BTW_CLNT_ORDER_DLVRY INTEGER NOT NULL CHECK (DAYS_BTW_CLNT_ORDER_DLVRY >= 0)
);
CREATE INDEX ON FACT_SALES_PIPELINE (SK_CLIENT, MF_PRICE, DAYS_BTW_CLNT_ORDER_DLVRY);
CREATE UNIQUE INDEX UNIQUE_FACT_SALES_PIPELINE ON FACT_SALES_PIPELINE (SK_CAR);		



--- Functions
CREATE OR REPLACE FUNCTION UPDATE_SCD_TYPE_0()
	RETURNS trigger AS
$BODY$
    BEGIN
        RAISE EXCEPTION 'you can''t update SCD TYPE 0';
    END;
$BODY$ 
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION UPDATE_SCD_TYPE_2() 
	RETURNS trigger AS
$UPDATE_SCD_TYPE_2$
    BEGIN
		IF OLD.IS_CURRENT = 1 THEN
			IF TG_ARGV[0] = 'DIM_CAR' THEN
				INSERT INTO DIM_CAR (VIN_CODE, MODEL, ISSUE_YEAR, BREND, FROM_DATE)
				VALUES
				(NEW.VIN_CODE, NEW.MODEL, NEW.ISSUE_YEAR, NEW.BREND, NEW.FROM_DATE + INTERVAL '1 day');
			ELSIF TG_ARGV[0] = 'DIM_MANAGER' THEN
				INSERT INTO DIM_MANAGER (EMP_CODE, FIRSTNAME, LASTNAME, DEPT, HIRE_DATE, FROM_DATE)
				VALUES
				(NEW.EMP_CODE, NEW.FIRSTNAME, NEW.LASTNAME, NEW.DEPT, NEW.HIRE_DATE, NEW.FROM_DATE + INTERVAL '1 day');
			ELSIF TG_ARGV[0] = 'DIM_CLIENT' THEN
				INSERT INTO DIM_CLIENT (PASS_CODE, FIRSTNAME, LASTNAME, BIRTHDAY, TEL, CITY, EMAIL, FROM_DATE)
				VALUES
				(NEW.PASS_CODE, NEW.FIRSTNAME, NEW.LASTNAME, NEW.BIRTHDAY, NEW.TEL, NEW.CITY, NEW.EMAIL, NEW.FROM_DATE + INTERVAL '1 day');
			END IF;
			
			OLD.END_DATE := NEW.FROM_DATE;
			OLD.IS_CURRENT := 0;
		END IF;
		RETURN OLD;
    END;
$UPDATE_SCD_TYPE_2$ 
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION UPDATE_SCD_TYPE_3() 
	RETURNS trigger AS
$UPDATE_SCD_TYPE_3$
    BEGIN
		NEW.PREVIOUS_TEL := OLD.CURRENT_TEL;
		NEW.TEL_UPDATE_DATE := CURRENT_DATE;
		RETURN NEW;
    END;
$UPDATE_SCD_TYPE_3$ 
LANGUAGE plpgsql;


---- Triggers

-- update SCD TYPE 0: DIM_DATE
CREATE OR REPLACE TRIGGER UPDATE_DIM_DATE
	BEFORE UPDATE ON DIM_DATE
	FOR EACH ROW
	EXECUTE PROCEDURE UPDATE_SCD_TYPE_0();


-- update SCD type 2: DIM_CAR, DIM_MANAGER, DIM_CLIENT
CREATE OR REPLACE TRIGGER UPDATE_DIM_CAR 
	BEFORE UPDATE ON DIM_CAR
    FOR EACH ROW 
	EXECUTE PROCEDURE UPDATE_SCD_TYPE_2('DIM_CAR');


CREATE OR REPLACE TRIGGER UPDATE_DIM_MANAGER 
	BEFORE UPDATE ON DIM_MANAGER
	FOR EACH ROW 
	EXECUTE PROCEDURE UPDATE_SCD_TYPE_2('DIM_MANAGER');

CREATE OR REPLACE TRIGGER UPDATE_DIM_CLIENT 
	BEFORE UPDATE ON DIM_CLIENT
    FOR EACH ROW 
	EXECUTE PROCEDURE UPDATE_SCD_TYPE_2('DIM_CLIENT');
    

-- update  SCD TYPE 3: DIM_SHOW_ROOM.CURRENT_TEL
CREATE OR REPLACE TRIGGER T_UPDATE_SCD_TYPE_3
	BEFORE UPDATE OF CURRENT_TEL
	ON DIM_SHOW_ROOM
	FOR EACH ROW
	EXECUTE PROCEDURE UPDATE_SCD_TYPE_3();    